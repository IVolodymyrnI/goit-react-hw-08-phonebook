{"version":3,"file":"static/js/3.43097c35.chunk.js","mappings":"kXAQMA,EAAiB,mCADF,GAGRC,GAAcC,EAAAA,EAAAA,IAAO,CAChCC,OAAOC,EAAAA,EAAAA,MACJC,SARuB,6BASvBC,QAXiB,yCACO,yBAW3BC,UAAUH,EAAAA,EAAAA,MACPC,SAT0B,gCAU1BG,IATgB,EASER,K,8BCGVS,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAKIC,EAAAA,EAAAA,IAAQ,CAAEC,UAAUC,EAAAA,EAAAA,GAAYb,KAJlCc,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MAHF,IAIEC,UAAaC,EAJf,EAIeA,OAAQC,EAJvB,EAIuBA,aAEvB,GAAkDC,EAAAA,EAAAA,MAAlD,eAAOC,EAAP,YAAmBC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,UAE7BC,EAAQ,mCAAG,WAAMC,GAAN,gGAEKL,EAASK,GAFd,OAEPC,EAFO,OAGblB,GAASmB,EAAAA,EAAAA,IAASD,EAAID,KAAKG,QAC3BpB,GAASqB,EAAAA,EAAAA,IAAQH,EAAID,KAAKK,OAC1Bf,IALa,gDAObgB,QAAQC,IAAR,MAPa,yDAAH,sDA6Bd,OAlBAC,EAAAA,EAAAA,YAAU,WACJZ,IACmB,MAAjBC,EAAMY,QACRC,EAAAA,GAAAA,MAAY,0CAGO,gBAAjBb,EAAMY,QACRC,EAAAA,GAAAA,MAAYb,EAAMA,OAGvB,GAAE,CAACA,EAAOD,KAEXY,EAAAA,EAAAA,YAAU,WACJV,IACFY,EAAAA,EAAAA,IAAM,uBAAwB,CAAEC,KAAM,gBAEzC,GAAE,CAACb,KAGF,iCACE,SAAC,IAAD,CAAMc,GAAI,EAAGC,SAAU,GAAIC,UAAU,SAASC,WAAY,IAA1D,qBAGA,kBAAMhB,SAAUV,EAAaU,GAA7B,WACE,SAAC,KAAD,CAAaiB,UAAWxB,EAAOhB,MAA/B,UACE,UAAC,IAAD,CAAWyC,QAAQ,QAAnB,mBAEE,SAAC,EAAAC,GAAD,QACEC,aAAc,GACdC,KAAK,QACLC,KAAK,SACDjC,EAAS,YAEf,SAAC,KAAD,UACGI,EAAOhB,OAASgB,EAAOhB,MAAM8C,gBAIpC,SAAC,KAAD,CAAaN,UAAWxB,EAAOZ,SAAUgC,GAAI,EAA7C,UACE,UAAC,IAAD,CAAWK,QAAQ,WAAnB,sBAEE,SAAC,EAAAC,GAAD,QACEC,aAAc,GACdC,KAAK,WACLC,KAAK,YACDjC,EAAS,eAEf,SAAC,KAAD,UACGI,EAAOZ,UAAYY,EAAOZ,SAAS0C,gBAI1C,SAAC,IAAD,CAAMC,eAAe,SAArB,UACE,SAAC,IAAD,CAAQH,KAAK,SAASI,UAAW/B,EAAjC,2BAOT,ECjGc,SAASgC,IACtB,OACE,SAAC,KAAD,CAAKC,EAAG,EAAGC,MAAO,IAAKC,OAAQ,OAAQC,EAAG,OAA1C,UACE,SAAC/C,EAAD,KAGL,C","sources":["components/LoginForm/LoginFormValidation.js","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import { object, string } from 'yup';\n\nconst EMAIL_PATTERN = '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$';\nconst EMAIL_PATTERN_TITTLE = 'Invalid email address';\nconst EMAIL_REQUIRED_TEXT = 'Email is a required field';\n\nconst PASSWORD_REQUIRED_TEXT = 'Password is a required field';\nconst PASSWORD_MIN = 8;\nconst PASSWORD_MIN_TEXT = `Minimum length should be ${PASSWORD_MIN}`;\n\nexport const loginSchema = object({\n  email: string()\n    .required(EMAIL_REQUIRED_TEXT)\n    .matches(EMAIL_PATTERN, EMAIL_PATTERN_TITTLE),\n  password: string()\n    .required(PASSWORD_REQUIRED_TEXT)\n    .min(PASSWORD_MIN, PASSWORD_MIN_TEXT),\n});\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport {\n  FormErrorMessage,\n  FormLabel,\n  FormControl,\n  Input,\n  Button,\n  Text,\n  Flex,\n} from '@chakra-ui/react';\nimport { toast } from 'react-hot-toast';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport { loginSchema } from './LoginFormValidation';\nimport { useLoginUserMutation } from 'redux/auth/authApi';\nimport { setToken, setUser } from 'redux/auth/authSlice';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isSubmitting },\n  } = useForm({ resolver: yupResolver(loginSchema) });\n  const [setLogin, { isError, error, isSuccess }] = useLoginUserMutation();\n\n  const onSubmit = async data => {\n    try {\n      const res = await setLogin(data);\n      dispatch(setToken(res.data.token));\n      dispatch(setUser(res.data.user));\n      reset();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (isError) {\n      if (error.status === 400) {\n        toast.error('The login or the password are invalid!');\n      }\n\n      if (error.status === 'FETCH_ERROR') {\n        toast.error(error.error);\n      }\n    }\n  }, [error, isError]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast('Welcome to Contacts!', { icon: 'üòç' });\n    }\n  }, [isSuccess]);\n\n  return (\n    <>\n      <Text mb={8} fontSize={32} textAlign=\"center\" fontWeight={600}>\n        Log in\n      </Text>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormControl isInvalid={errors.email}>\n          <FormLabel htmlFor=\"email\">\n            Email\n            <Input\n              defaultValue={''}\n              type=\"email\"\n              name=\"email\"\n              {...register('email')}\n            />\n            <FormErrorMessage>\n              {errors.email && errors.email.message}\n            </FormErrorMessage>\n          </FormLabel>\n        </FormControl>\n        <FormControl isInvalid={errors.password} mb={8}>\n          <FormLabel htmlFor=\"password\">\n            Password\n            <Input\n              defaultValue={''}\n              type=\"password\"\n              name=\"password\"\n              {...register('password')}\n            />\n            <FormErrorMessage>\n              {errors.password && errors.password.message}\n            </FormErrorMessage>\n          </FormLabel>\n        </FormControl>\n        <Flex justifyContent=\"center\">\n          <Button type=\"submit\" isLoading={isSubmitting}>\n            Submit\n          </Button>\n        </Flex>\n      </form>\n    </>\n  );\n};\n","import { Box } from '@chakra-ui/react';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <Box p={4} width={350} heigth={'auto'} m={'auto'}>\n      <LoginForm />\n    </Box>\n  );\n}\n"],"names":["PASSWORD_MIN_TEXT","loginSchema","object","email","string","required","matches","password","min","LoginForm","dispatch","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","reset","formState","errors","isSubmitting","useLoginUserMutation","setLogin","isError","error","isSuccess","onSubmit","data","res","setToken","token","setUser","user","console","log","useEffect","status","toast","icon","mb","fontSize","textAlign","fontWeight","isInvalid","htmlFor","I","defaultValue","type","name","message","justifyContent","isLoading","Login","p","width","heigth","m"],"sourceRoot":""}