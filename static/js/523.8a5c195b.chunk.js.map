{"version":3,"file":"static/js/523.8a5c195b.chunk.js","mappings":"oSAOaA,EAAgB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACxC,GACEC,EAAAA,EAAAA,MADF,eAAOC,EAAP,YAAwBC,EAAxB,EAAwBA,UAAWC,EAAnC,EAAmCA,UAAWC,EAA9C,EAA8CA,QAASC,EAAvD,EAAuDA,MAevD,OAZAC,EAAAA,EAAAA,YAAU,WACJF,GACFG,EAAAA,GAAAA,MAAYF,EAEf,GAAE,CAACA,EAAOD,KAEXE,EAAAA,EAAAA,YAAU,WACJH,IACFI,EAAAA,EAAAA,IAAM,gCAAiC,CAAEC,KAAM,sBAElD,GAAE,CAACL,KAGF,+BACIA,IACA,SAAC,KAAD,CAAUM,GAAI,EAAd,UACE,UAAC,IAAD,CAAMC,WAAW,SAAjB,WACE,UAAC,IAAD,CAAMC,SAAU,GAAIC,WAAY,IAAKC,GAAI,EAAzC,UACGf,EADH,KACWC,MAEX,SAAC,IAAD,CACEe,KAAK,SACLC,QAAS,kBAAMd,EAAcJ,EAApB,EACTK,UAAWA,EAHb,mBALkBL,IAiB7B,EC3CYmB,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAV,ECO1B,SAASC,IACd,IAAcC,GAAaC,EAAAA,EAAAA,MAAnBC,KACFJ,GAASK,EAAAA,EAAAA,IAAYP,GAE3B,IAAKI,EACH,OAAO,KAGT,IAAMI,EAAmBJ,EAASF,QAAO,SAAAO,GAAO,OAC9CA,EAAQ3B,KAAK4B,cAAcC,SAAST,EAAOQ,cADG,IAIhD,OACE,8BACGN,IACC,SAAC,KAAD,CAAeQ,UAAU,OAAzB,SACGJ,EAAiBK,KAAI,gBAAGhC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACpB,SAACH,EAAD,CAAwBC,GAAIA,EAAIC,KAAMA,EAAMC,OAAQA,GAAhCF,EADA,OAO/B,C,gECvBM,SAASiC,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,MAApBC,EAAR,EAAQA,SACFhB,GAASiB,EADf,EAAkBA,OACG,aAAc,IAMnC,OAJA7B,EAAAA,EAAAA,YAAU,WACRyB,GAASK,EAAAA,EAAAA,IAAUlB,GACpB,GAAE,CAACa,EAAUb,KAGZ,SAAC,KAAD,CAAKmB,MAAO,IAAKxB,GAAI,EAArB,UACE,2BACE,SAAC,KAAD,WACE,SAAC,EAAAyB,GAAD,QACEC,YAAY,SACZC,aAAa,IACTN,EAAS,qBAMxB,C,2HC7BYO,EAAoB,SAAC,GAA0B,IAAD,IAAvBC,MAAAA,OAAuB,MAAf,GAAe,EAAX5C,EAAW,EAAXA,KAExC6C,EADeD,EAAMb,KAAI,SAAAJ,GAAO,OAAIA,EAAQ3B,KAAK4B,aAAjB,IACXkB,QAAQ9C,EAAK4B,eAExC,OAAQmB,SAAmB,IAAXF,EACjB,E,UCQYG,GAAYC,EAAAA,EAAAA,IAAO,CAC9BjD,MAAMkD,EAAAA,EAAAA,MACHC,SALsB,4BAMtBC,QAXH,yHAEA,2IAUAnD,QAAQiD,EAAAA,EAAAA,MACLC,SAPuB,oCAQvBC,QAhBH,+EAMA,kGCYWC,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,GAA6B/B,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,KAAM+B,EAAd,EAAcA,WACd,GACEC,EAAAA,EAAAA,MADF,eAAOC,EAAP,YAAqBnD,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,MAAOH,EAArC,EAAqCA,UAAWC,EAAhD,EAAgDA,UAEhD,GAKI8B,EAAAA,EAAAA,IAAQ,CAAEuB,UAAUC,EAAAA,EAAAA,GAAYX,KAJlCZ,EADF,EACEA,SACAwB,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAETE,EAAY5D,GAAamD,EAEzBU,EAAQ,mCAAG,WAAMC,GAAN,qEACQvB,EAAkB,CACvCC,MAAOpB,EACPxB,KAAMkE,EAAOlE,OAHA,yCAONS,EAAAA,GAAAA,MAAY,gDAPN,gCAWPgD,EAAWS,GAXJ,OAaRF,IACHH,IACAP,KAfW,gDAkBb7C,EAAAA,GAAAA,MAAA,MAlBa,yDAAH,sDAkCd,OAZAD,EAAAA,EAAAA,YAAU,WACJF,GACFG,EAAAA,GAAAA,MAAYF,EAEf,GAAE,CAACA,EAAOD,KAEXE,EAAAA,EAAAA,YAAU,WACJH,GACFI,EAAAA,GAAAA,QAAc,8BAEjB,GAAE,CAACJ,KAGF,kBAAM4D,SAAUL,EAAaK,GAA7B,WACE,SAAC,KAAD,CAAaE,UAAWL,EAAO9D,KAA/B,UACE,UAAC,IAAD,CAAWoE,QAAQ,OAAnB,kBAEE,SAAC,EAAA5B,GAAD,QACEC,YAAY,OACZC,aAAc,GACd1B,KAAK,OACLhB,KAAK,QACDoC,EAAS,WAEf,SAAC,KAAD,UACG0B,EAAO9D,MAAQ8D,EAAO9D,KAAKqE,gBAIlC,SAAC,KAAD,CAAaF,UAAWL,EAAO7D,OAA/B,UACE,UAAC,IAAD,CAAWmE,QAAQ,SAAnB,oBAEE,SAAC,EAAA5B,GAAD,QACEE,aAAc,GACd1B,KAAK,MACLhB,KAAK,SACLyC,YAAY,kBACRL,EAAS,aAEf,SAAC,KAAD,UACG0B,EAAO7D,QAAU6D,EAAO7D,OAAOoE,gBAItC,SAAC,IAAD,CAAMC,QAAQ,SAASC,GAAI,EAA3B,UACE,SAAC,IAAD,CAAQvD,KAAK,SAASZ,UAAW4D,EAAjC,wBAMP,EC9FM,SAASQ,EAAT,GAA+C,IAApBC,EAAmB,EAAnBA,OAAQnB,EAAW,EAAXA,QACxC,OACE,UAAC,KAAD,CAAOmB,OAAQA,EAAQnB,QAASA,EAAhC,WACE,SAAC,IAAD,KACA,UAAC,IAAD,CAAcoB,EAAG,EAAGnC,MAAO,IAA3B,WACE,SAAC,IAAD,CAAaoC,UAAU,SAASD,EAAG,EAAnC,gCAGA,SAAC,IAAD,KACA,SAAC,IAAD,CAAWA,EAAG,EAAd,UACE,SAACrB,EAAD,CAAaC,QAASA,WAK/B,CCrBM,IAAMsB,EAAe,WAC1B,OAAoCC,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,OAAQL,EAAhB,EAAgBA,OAAQnB,EAAxB,EAAwBA,QAExB,OACE,iCACE,UAAC,IAAD,CAAM3C,GAAI,GAAV,WACE,SAACqB,EAAD,KACA,SAACwC,EAAD,CAAiBC,OAAQA,EAAQnB,QAASA,KAC1C,SAAC,IAAD,CAAQrC,QAAS6D,EAAjB,qBAEF,SAACzD,EAAD,MAGL,ECjBc,SAAS0D,IACtB,OAAO,SAACH,EAAD,GACR,C","sources":["components/PhoneListItem/PhoneListItem.jsx","redux/filter/selectors.js","components/PhoneList/PhoneList.jsx","components/FilterByName/FilterByName.jsx","utils/checkOnUniqueName.js","components/ContactForm/ContactFormValidation.js","components/ContactForm/ContactForm.jsx","components/AddContactModal/AddContactModal.jsx","components/ContactsPage/ContactsPage.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { ListItem, Button, Flex, Text } from '@chakra-ui/react';\nimport { toast } from 'react-hot-toast';\nimport PropTypes from 'prop-types';\n\nimport { useDeleteContactMutation } from 'redux/contacts/contactsApi';\n\nexport const PhoneListItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading, isSuccess, isError, error }] =\n    useDeleteContactMutation();\n\n  useEffect(() => {\n    if (isError) {\n      toast.error(error);\n    }\n  }, [error, isError]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast(`The contact has been deleted!`, { icon: '🗑️' });\n    }\n  }, [isSuccess]);\n\n  return (\n    <>\n      {!isSuccess && (\n        <ListItem mb={4} key={id}>\n          <Flex alignItems=\"center\">\n            <Text fontSize={24} fontWeight={500} mr={4}>\n              {name}: {number}\n            </Text>\n            <Button\n              type=\"button\"\n              onClick={() => deleteContact(id)}\n              isLoading={isLoading}\n            >\n              X\n            </Button>\n          </Flex>\n        </ListItem>\n      )}\n    </>\n  );\n};\n\nPhoneListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","export const selectFilter = state => state.filter;\n","import { useSelector } from 'react-redux';\nimport { UnorderedList } from '@chakra-ui/react';\n\nimport { PhoneListItem } from 'components/PhoneListItem/PhoneListItem';\nimport { useFetchContactsQuery } from 'redux/contacts/contactsApi';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport function PhoneNumberList() {\n  const { data: contacts } = useFetchContactsQuery();\n  const filter = useSelector(selectFilter);\n\n  if (!contacts) {\n    return null;\n  }\n\n  const visiableContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      {contacts && (\n        <UnorderedList styleType=\"none\">\n          {visiableContacts.map(({ id, name, number }) => (\n            <PhoneListItem key={id} id={id} name={name} number={number} />\n          ))}\n        </UnorderedList>\n      )}\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { Box, FormControl, Input } from '@chakra-ui/react';\n\nimport { setFilter } from 'redux/filter/filterSlice';\n\nexport function FilterByName() {\n  const dispatch = useDispatch();\n  const { register, watch } = useForm();\n  const filter = watch('searchName', '');\n\n  useEffect(() => {\n    dispatch(setFilter(filter));\n  }, [dispatch, filter]);\n\n  return (\n    <Box width={200} mr={4}>\n      <form>\n        <FormControl>\n          <Input\n            placeholder=\"Search\"\n            defaultValue=\"\"\n            {...register('searchName')}\n          />\n        </FormControl>\n      </form>\n    </Box>\n  );\n}\n","export const checkOnUniqueName = ({ array = [], name }) => {\n  const arrayOfNames = array.map(contact => contact.name.toLowerCase());\n  const index = arrayOfNames.indexOf(name.toLowerCase());\n\n  return !Boolean(index === -1);\n};\n","import { object, string } from 'yup';\n\nconst PHONE_NUMBER_PATTERN =\n  /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\nconst NAME_PATTERN =\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\nconst NAME_PATTERN_TEXT =\n  \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\";\nconst PHONE_NUMBER_PATTERN_TITTLE =\n  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\nconst NAME_REQUIRED_TEXT = 'Name is a required field';\nconst NUMBER_PATTERN_TEXT = 'Phone number is a required field';\n\nexport const addSchema = object({\n  name: string()\n    .required(NAME_REQUIRED_TEXT)\n    .matches(NAME_PATTERN, NAME_PATTERN_TEXT),\n  number: string()\n    .required(NUMBER_PATTERN_TEXT)\n    .matches(PHONE_NUMBER_PATTERN, PHONE_NUMBER_PATTERN_TITTLE),\n});\n","import { toast } from 'react-hot-toast';\nimport { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport {\n  FormErrorMessage,\n  FormLabel,\n  FormControl,\n  Input,\n  Button,\n} from '@chakra-ui/react';\nimport { Flex } from '@chakra-ui/react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport PropTypes from 'prop-types';\n\nimport { checkOnUniqueName } from 'utils';\nimport { addSchema } from './ContactFormValidation';\nimport {\n  useAddContactMutation,\n  useFetchContactsQuery,\n} from 'redux/contacts/contactsApi';\n\nexport const ContactForm = ({ onClose }) => {\n  const { data, isFetching } = useFetchContactsQuery();\n  const [addContact, { isError, error, isLoading, isSuccess }] =\n    useAddContactMutation();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(addSchema) });\n  const isPending = isLoading || isFetching;\n\n  const onSubmit = async values => {\n    const isContactExist = checkOnUniqueName({\n      array: data,\n      name: values.name,\n    });\n\n    if (isContactExist) {\n      return toast.error('The name of the contacted is already exist!');\n    }\n\n    try {\n      await addContact(values);\n\n      if (!isPending) {\n        reset();\n        onClose();\n      }\n    } catch (err) {\n      toast.error(err);\n    }\n  };\n\n  useEffect(() => {\n    if (isError) {\n      toast.error(error);\n    }\n  }, [error, isError]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast.success('The contact has been added!');\n    }\n  }, [isSuccess]);\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <FormControl isInvalid={errors.name}>\n        <FormLabel htmlFor=\"name\">\n          Name\n          <Input\n            placeholder=\"John\"\n            defaultValue={''}\n            type=\"text\"\n            name=\"name\"\n            {...register('name')}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n        </FormLabel>\n      </FormControl>\n      <FormControl isInvalid={errors.number}>\n        <FormLabel htmlFor=\"number\">\n          Number\n          <Input\n            defaultValue={''}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"380-972-121-34\"\n            {...register('number')}\n          />\n          <FormErrorMessage>\n            {errors.number && errors.number.message}\n          </FormErrorMessage>\n        </FormLabel>\n      </FormControl>\n      <Flex justify=\"center\" mt={4}>\n        <Button type=\"submit\" isLoading={isPending}>\n          Submit\n        </Button>\n      </Flex>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nexport function AddContactModal({ isOpen, onClose }) {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent p={8} width={350}>\n        <ModalHeader textAlign=\"center\" p={4}>\n          Add a new contact\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody p={4}>\n          <ContactForm onClose={onClose} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nAddContactModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import { Button, Flex, useDisclosure } from '@chakra-ui/react';\n\nimport { PhoneNumberList } from 'components/PhoneList/PhoneList';\nimport { FilterByName } from 'components/FilterByName/FilterByName';\nimport { AddContactModal } from 'components/AddContactModal/AddContactModal';\n\nexport const ContactsPage = () => {\n  const { onOpen, isOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Flex mb={12}>\n        <FilterByName />\n        <AddContactModal isOpen={isOpen} onClose={onClose} />\n        <Button onClick={onOpen}>New</Button>\n      </Flex>\n      <PhoneNumberList />\n    </>\n  );\n};\n","import { ContactsPage } from 'components/ContactsPage/ContactsPage';\n\nexport default function Contacts() {\n  return <ContactsPage />;\n}\n"],"names":["PhoneListItem","id","name","number","useDeleteContactMutation","deleteContact","isLoading","isSuccess","isError","error","useEffect","toast","icon","mb","alignItems","fontSize","fontWeight","mr","type","onClick","selectFilter","state","filter","PhoneNumberList","contacts","useFetchContactsQuery","data","useSelector","visiableContacts","contact","toLowerCase","includes","styleType","map","FilterByName","dispatch","useDispatch","useForm","register","watch","setFilter","width","I","placeholder","defaultValue","checkOnUniqueName","array","index","indexOf","Boolean","addSchema","object","string","required","matches","ContactForm","onClose","isFetching","useAddContactMutation","addContact","resolver","yupResolver","handleSubmit","reset","errors","formState","isPending","onSubmit","values","isInvalid","htmlFor","message","justify","mt","AddContactModal","isOpen","p","textAlign","ContactsPage","useDisclosure","onOpen","Contacts"],"sourceRoot":""}