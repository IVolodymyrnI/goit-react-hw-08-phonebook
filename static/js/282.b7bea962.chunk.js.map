{"version":3,"file":"static/js/282.b7bea962.chunk.js","mappings":"wYAcMA,EAAiB,mCADF,GAGRC,GAAiBC,EAAAA,EAAAA,IAAO,CACnCC,OAAOC,EAAAA,EAAAA,MACJC,SAduB,6BAevBC,QAjBiB,yCACK,yBAiBzBC,MAAMH,EAAAA,EAAAA,MACHC,SAfsB,4BAgBtBC,QAdH,yHAEA,2IAaAE,UAAUJ,EAAAA,EAAAA,MACPC,SAZ0B,gCAa1BI,IAZgB,EAYET,K,SCNVU,EAAa,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAsDC,EAAAA,EAAAA,MAAtD,eAAOC,EAAP,YAAuBC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,QACzC,GAKIC,EAAAA,EAAAA,IAAQ,CAAEC,UAAUC,EAAAA,EAAAA,GAAYnB,KAJlCoB,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MAHF,IAIEC,UAAaC,EAJf,EAIeA,OAAQC,EAJvB,EAIuBA,aAGjBC,EAAQ,mCAAG,WAAMC,GAAN,gGAEKd,EAAac,GAFlB,OAEPC,EAFO,OAGblB,GAASmB,EAAAA,EAAAA,IAASD,EAAID,KAAKG,QAC3BpB,GAASqB,EAAAA,EAAAA,IAAQH,EAAID,KAAKK,OAC1BV,IALa,gDAObW,QAAQC,IAAR,MAPa,yDAAH,sDAyBd,OAdAC,EAAAA,EAAAA,YAAU,WACJnB,GACmB,MAAjBD,EAAMqB,QACRC,EAAAA,GAAAA,MAAY,4BAGjB,GAAE,CAACtB,EAAOC,KAEXmB,EAAAA,EAAAA,YAAU,WACJrB,IACFuB,EAAAA,EAAAA,IAAM,qCAAsC,CAAEC,KAAM,gBAEvD,GAAE,CAACxB,KAGF,iCACE,SAAC,IAAD,CAAMyB,GAAI,EAAGC,UAAU,SAASC,SAAU,GAAIC,WAAY,IAA1D,sBAGA,kBAAMhB,SAAUL,EAAaK,GAA7B,WACE,SAAC,KAAD,CAAaiB,UAAWnB,EAAOlB,KAA/B,UACE,UAAC,IAAD,CAAWsC,QAAQ,OAAnB,uBAEE,SAAC,EAAAC,GAAD,QACEC,GAAG,OACHC,aAAc,GACdC,KAAK,OACL1C,KAAK,QACDc,EAAS,WAEf,SAAC,KAAD,UACGI,EAAOlB,MAAQkB,EAAOlB,KAAK2C,gBAIlC,SAAC,KAAD,CAAaN,UAAWnB,EAAOtB,MAA/B,UACE,UAAC,IAAD,CAAW0C,QAAQ,QAAnB,mBAEE,SAAC,EAAAC,GAAD,QACEE,aAAc,GACdC,KAAK,QACL1C,KAAK,SACDc,EAAS,YAEf,SAAC,KAAD,UACGI,EAAOtB,OAASsB,EAAOtB,MAAM+C,gBAIpC,SAAC,KAAD,CAAaN,UAAWnB,EAAOjB,SAAUgC,GAAI,EAA7C,UACE,UAAC,IAAD,CAAWK,QAAQ,WAAnB,sBAEE,SAAC,EAAAC,GAAD,QACEE,aAAc,GACdC,KAAK,WACL1C,KAAK,YACDc,EAAS,eAEf,SAAC,KAAD,UACGI,EAAOjB,UAAYiB,EAAOjB,SAAS0C,gBAI1C,SAAC,IAAD,CAAMC,eAAe,SAArB,UACE,SAAC,IAAD,CAAQF,KAAK,SAASG,UAAW1B,EAAjC,2BAOT,EC5Gc,SAAS2B,IACtB,OACE,SAAC,KAAD,CAAKC,EAAG,EAAGC,MAAO,IAAKC,OAAQ,OAAQC,EAAG,OAA1C,UACE,SAAC/C,EAAD,KAGL,C","sources":["components/SignUpForm/SignUpFormValidation.js","components/SignUpForm/SignUpForm.jsx","pages/SignUp.jsx"],"sourcesContent":["import { object, string } from 'yup';\n\nconst EMAIL_PATTERN = '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$';\nconst EMAIL_PATTERN_TEXT = 'Invalid email address';\nconst EMAIL_REQUIRED_TEXT = 'Email is a required field';\n\nconst NAME_REQUIRED_TEXT = 'Name is a required field';\nconst NAME_PATTERN =\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\nconst NAME_PATTERN_TEXT =\n  \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\";\n\nconst PASSWORD_REQUIRED_TEXT = 'Password is a required field';\nconst PASSWORD_MIN = 8;\nconst PASSWORD_MIN_TEXT = `Minimum length should be ${PASSWORD_MIN}`;\n\nexport const registerSchema = object({\n  email: string()\n    .required(EMAIL_REQUIRED_TEXT)\n    .matches(EMAIL_PATTERN, EMAIL_PATTERN_TEXT),\n  name: string()\n    .required(NAME_REQUIRED_TEXT)\n    .matches(NAME_PATTERN, NAME_PATTERN_TEXT),\n  password: string()\n    .required(PASSWORD_REQUIRED_TEXT)\n    .min(PASSWORD_MIN, PASSWORD_MIN_TEXT),\n});\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport {\n  FormErrorMessage,\n  FormLabel,\n  FormControl,\n  Input,\n  Button,\n  Text,\n  Flex,\n} from '@chakra-ui/react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-hot-toast';\n\nimport { useRegisterMutation } from 'redux/auth/authApi';\nimport { setToken, setUser } from 'redux/auth/authSlice';\nimport { registerSchema } from './SignUpFormValidation';\n\nexport const SignUpForm = () => {\n  const dispatch = useDispatch();\n  const [registerUser, { isSuccess, error, isError }] = useRegisterMutation();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isSubmitting },\n  } = useForm({ resolver: yupResolver(registerSchema) });\n\n  const onSubmit = async data => {\n    try {\n      const res = await registerUser(data);\n      dispatch(setToken(res.data.token));\n      dispatch(setUser(res.data.user));\n      reset();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (isError) {\n      if (error.status === 400) {\n        toast.error('The email already exists!');\n      }\n    }\n  }, [error, isError]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast(\"We're welcoming a new participant!\", { icon: '👋' });\n    }\n  }, [isSuccess]);\n\n  return (\n    <>\n      <Text mb={8} textAlign=\"center\" fontSize={32} fontWeight={600}>\n        Sign up\n      </Text>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormControl isInvalid={errors.name}>\n          <FormLabel htmlFor=\"name\">\n            User name\n            <Input\n              id=\"name\"\n              defaultValue={''}\n              type=\"text\"\n              name=\"name\"\n              {...register('name')}\n            />\n            <FormErrorMessage>\n              {errors.name && errors.name.message}\n            </FormErrorMessage>\n          </FormLabel>\n        </FormControl>\n        <FormControl isInvalid={errors.email}>\n          <FormLabel htmlFor=\"email\">\n            Email\n            <Input\n              defaultValue={''}\n              type=\"email\"\n              name=\"email\"\n              {...register('email')}\n            />\n            <FormErrorMessage>\n              {errors.email && errors.email.message}\n            </FormErrorMessage>\n          </FormLabel>\n        </FormControl>\n        <FormControl isInvalid={errors.password} mb={8}>\n          <FormLabel htmlFor=\"password\">\n            Password\n            <Input\n              defaultValue={''}\n              type=\"password\"\n              name=\"password\"\n              {...register('password')}\n            />\n            <FormErrorMessage>\n              {errors.password && errors.password.message}\n            </FormErrorMessage>\n          </FormLabel>\n        </FormControl>\n        <Flex justifyContent=\"center\">\n          <Button type=\"submit\" isLoading={isSubmitting}>\n            Submit\n          </Button>\n        </Flex>\n      </form>\n    </>\n  );\n};\n","import { Box } from '@chakra-ui/react';\nimport { SignUpForm } from 'components/SignUpForm/SignUpForm';\n\nexport default function SignUp() {\n  return (\n    <Box p={4} width={350} heigth={'auto'} m={'auto'}>\n      <SignUpForm />\n    </Box>\n  );\n}\n"],"names":["PASSWORD_MIN_TEXT","registerSchema","object","email","string","required","matches","name","password","min","SignUpForm","dispatch","useDispatch","useRegisterMutation","registerUser","isSuccess","error","isError","useForm","resolver","yupResolver","register","handleSubmit","reset","formState","errors","isSubmitting","onSubmit","data","res","setToken","token","setUser","user","console","log","useEffect","status","toast","icon","mb","textAlign","fontSize","fontWeight","isInvalid","htmlFor","I","id","defaultValue","type","message","justifyContent","isLoading","SignUp","p","width","heigth","m"],"sourceRoot":""}